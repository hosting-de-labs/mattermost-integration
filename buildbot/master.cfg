# -*- python -*-
# vi: set tabstop=8 softtabstop=8 noexpandtab shiftwidth=8:
# vi: set comments=b\:##,fb\:- foldmarker=##[[,##]]:-

from buildbot import locks
from buildbot.plugins import *
from twisted.cred import strcred
import pipes

c = BuildmasterConfig = {}

##
## Locking allow one build and deploy running one at a time.
##

master_lock = locks.MasterLock("master_lock")

##[[ WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [
	worker.Worker(
		"{{ buildworker_name }}"
	,	"{{ buildworker_pass }}"
	)
,	worker.Worker(
		"{{ buildworker_02_name }}"
	,	"{{ buildworker_02_pass }}"
	)
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)

c['protocols'] = {'pb': {'port': 9989}}

##]]

##[[ CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

##]]

##[[ SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

##]]

##[[ BUILDERS

## The 'builders' list defines the Builders, which tell Buildbot how to perform
## a build: what steps, and which workers can execute them.  Note that any
## particular build will only take place on one worker.

c['builders'] = []

##]]

##[[ SERVICES

## 'services' is a list of BuildbotService items like reporter targets. The
## status of each build will be pushed to these targets.
## buildbot/reporters/*.py has a variety to choose from, like IRC bots.

c['services'] = []

from buildbot.plugins import reporters
import mattermost_reporter

mmpush = reporters.HttpStatusPush(
		serverUrl="http://{{ mattermost_ip }}:{{ mattermost_port }}{{ chat_hook }}"
	,	format_fn=mattermost_reporter.formatter
	,	wantProperties=True
	)

c['services'].append(mmpush)

##]]

##[[ PROJECT IDENTITY

c['title'] = "{{ buildmaster_title }}"
c['titleURL'] = "{{ buildmaster_url }}"

## the 'buildbotURL' string should point to the location where the buildbot's
## internal web server is visible. This typically uses the port number set in
## the 'www' entry below, but with an externally-visible host name which the
## buildbot cannot figure out without some help.

c['buildbotURL'] = "http://{{ buildmaster_ip }}:{{ buildmaster_http_port }}/"

##]]

##[[ Authentication
##

auth = util.UserPasswordAuth([
		('{{ buildmaster_user }}','{{ buildmaster_pass }}')
	])

authz = util.Authz(
		allowRules=[
			util.AnyControlEndpointMatcher(role="admins")
		]
	,	roleMatchers=[
			util.RolesFromUsername(
				roles=['admins']
			,	usernames=['{{ buildmaster_user }}'])
		]
	)

c['www'] = {
		"port": {{ buildmaster_http_port }}
	,	"plugins": {
			"console_view": True
		}
	,	"auth": auth
	,	"authz": authz
	,	"change_hook_dialects":{
			"github": {
				"secret": "{{ buildmaster_github_secret }}"
			,	"strict": True
			}
		,	"mattermost": {
				"token": "{{ mattermost_slash_build_token }}"
			,	"channel": "ci"
			,	"repo_base_url": "git@github.com:{{ github_username }}/"
			}
		}
	}

##]]

##[[ DB URL

## This specifies what database buildbot uses to store its state.  You can leave
## this at its default for all but the largest installations.

c['db'] = {
	'db_url' : "sqlite:///state.sqlite",
}

##]]

repo_config = {

##[[ Example project

	"project-example": {
		"name"		: "project-example"
	,	"desc"		: "Project example description"
	,	"url"		: "git@github.com:{{ github_username }}/project-example.git"
	,	"branch"	: "master"
	,	"workdir"	: "/data/project-example"
	,	"allow_force"	: True
	,	"worker"	: "{{ buildworker_name }}"
	,	"mattermost"	: {
			"allow"		: True
		,	"name"		: "mattermost_build_project-example_master"
		}
	,	"commands": [
			"make clean"
		,	"make test"
		,	"make deploy"
		]
	,	"env": {
			'EDITOR': "/usr/bin/vim"
		}
	}
##]]

}

##[[ Generate build
##
## Generate single-branch-scheduler, force-scheduler, mattermosh hook, build
## steps, and builder for above config
##

for repo_name, repo in repo_config.iteritems():
	##
	## Create scheduler for triggering build from Git commit.
	##
	c["schedulers"].append(
		schedulers.SingleBranchScheduler(
			name="git_%s" % repo_name
		,	change_filter=util.ChangeFilter(
				project="{{ github_username }}/%s" % repo["name"]
			,	branch_re=repo["branch"]
			)
		,	treeStableTimer=10
		,	builderNames=[repo_name]
		)
	)

	##
	## allow task to run from Buildbot Web UI?
	##
	if repo["allow_force"]:
		c["schedulers"].append(
			schedulers.ForceScheduler(
				name="force_%s" % repo_name
			,	builderNames=[repo_name]
			)
		)

	##
	## allow task to run from mattermost slash command?
	##
	if repo["mattermost"]["allow"]:
		c["schedulers"].append(
			schedulers.SingleBranchScheduler(
				name="mattermost_%s" % repo_name
			,	change_filter=util.ChangeFilter(
					project_re=repo["mattermost"]["name"]
				,	category="mattermost"
				)
			,	treeStableTimer=None
			,	builderNames=[repo_name]
			)
		)
	##
	## Create build factory, list of command to run.
	##
	f = util.BuildFactory()

	f.workdir = repo["workdir"]

	f.addStep(steps.ShellCommand(
			command="""
				git ls-remote || git clone %s .
			""" % repo["url"]
		,	env=repo["env"]
		,	haltOnFailure=True
		)
	)
	f.addStep(steps.ShellCommand(
			command="""
				git reset --hard HEAD && git fetch origin
			"""
		,	env=repo["env"]
		,	haltOnFailure=True
		)
	)
	f.addStep(steps.ShellCommand(
			command=util.Interpolate("git checkout -B %(src::branch)s origin/%(src::branch)s")
		,	env=repo["env"]
		,	haltOnFailure=True
		)
	)

	for cmd in repo["commands"]:
		f.addStep(
			steps.ShellCommand(
				command="""
				%s
				""" % cmd
			,	env=repo["env"]
			,	haltOnFailure=True
			)
		)

	##
	## Attach build factory that we create above to Builder that will be
	## run on worker `repo[worker]`.
	##
	builderCfg = util.BuilderConfig(
		name=repo_name
	,	workername=repo["worker"]
	,	factory=f
	,	locks=[master_lock.access("exclusive")]
	,	description=repo["desc"]
	)

	c["builders"].append(builderCfg)

##
##]]
